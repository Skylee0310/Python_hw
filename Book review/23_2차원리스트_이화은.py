#23장 2차원 리스트 사용하기
#23.1 2차원 리스트를 만들고 요소에 접근하기
a= [[10,20],
    [30, 40],
    [50, 60]]
print(a)

#23.1.1 2차원 리스트의 요소에 접근하기
print(a[0][0]) #행 / 열 인덱스
print(a[1][1])
print(a[2][1])
a[0][1] = 1000 #인덱스로 값 할당 가능.
print(a[0][1])
print(a)
print('-'*80)

#참고 : 톱니형 리스트
b = [[10, 20],
     [500, 600, 700],
     [9],
     [30, 40],
     [8],
     [800,900,1000]]

c = []
c.append([]) #c리스트 안에 빈리스트를 추가.
c[0].append(10) #c리스트 안에 있는 빈 리스트에 10을 추가
print(c)
c[0].append(20) #c리스트 안에 있는 리스트(c[0])에 20을 추가
c.append([]) #c리스트 안에 빈 리스트를 하나 더 추가
c[1].append(30)
c[1].append(40)
c[1].append(50)
print(c) #c[0]리스트에 값이 2개, c[1]리스트에 값이 3개인 톱니형 리스트 c 출력.

#참고2 : 2차원 튜플
d = ((10, 20), (30, 40), (50, 60)) #튜플 안에 튜플을 넣은 2차원 튜플 생성.
# d[0][0] = 45 -> 튜플은 값을 변경할 수 없음.
# print(d[0][0])
e = ([10, 20], [30, 40], [50, 60]) #튜플 안에 리스트를 넣음.
e[0][0] = 100 # e[0][0] 값은 100으로 변경됨 -> 튜플 안에 있는 리스트의 원소 값은 변경할 수 있음.
print(e)
f = [(10, 20), (30, 40), (50, 60)] #리스트 안에 튜플을 넣음.
# f[0][0] = 100 # -> 리스트 안에 있는 튜플 원소 값은 변경할 수 없음.
f[0] = (100, 200) # 리스트는 변경할 수 있다.
print(f)

from pprint import pprint #2차원 리스트의 사각형 구조를 유지하도록 출력하기 위해 pprint 모듈의 pprint 함수 사용
pprint(a, indent=4, width =20) #indent는 들여쓰기 칸 수, width는 가로 폭.

#23.2 반복문으로 2차원 리스트의 요소를 모두 출력하기.
#23.2.1 for 반복문을 한 번만 사용하기
a= [[10,20],
    [30, 40],
    [50, 60]]
for x, y in a : #리스트의 가로 한 줄(안쪽 리스트)에서 요소 2개를 꺼냄.
    print(x, y) #꺼낼때 변수 수와 리스트 안 리스트 원소 수가 같아야 함.
#23.2.2 for 반복문을 두 번 사용하기
a = [[10, 20], [30, 40], [50, 60]]
for i in a :        #a에서 안쪽 리스트를 꺼냄.
    for j in i :    #안쪽 리스트에서 요소를 하나씩 꺼냄.
        print(j, end=' ')
    print() #한줄 끝나면 줄 바꾸기.

# 분해 하기
# i = [10, 20]
# for j in i :
#   print(j, end=' ') #리스트 안에 있는 10과 20을 하나씩 꺼내서 한 줄로 프린트 한다.

# a = [[10, 20], [30, 40], [50, 60]]
# a리스트에서 원소 a[0] = [10, 20], a[1] = [30, 40], a[2] = [50, 60]를 각각 꺼낸다.
# a[0] 리스트, a[1] 리스트, a[2]리스트에서 각각의 원소를 꺼낸다.

#23.2.2 for 반복문을 두 번 사용하기
a = [[10, 20], [30, 40], [50, 60]]
for i in range(len(a)) : #range(len(a))부터 반복한다 => a리스트의 원소 수 만큼 반복한다. i = 1, 2, ... len(a)-1
    for j in range(len(a[i])) : # a[i] = a[1]...a[len(a)-1] ==> range(len(a[i])) = a의 원소(리스트)의 원소 개수
        print(a[i][j], end='')
        #인덱스로 인쇄. 1번 for문에서 a리스트의 원소 수를 구하고 2번 for 문에서 a리스트의 원소 리스트의 원소 수를 구해서
        #각각을 인덱스로 하여 요소의 수만큼 반복해서 출력. 한줄을 이어서 출력.
    print() #한줄이 끝나면 줄 바꿈.
print('-'*80)

#23.2.4. while 반복문을 한 번 사용하기
a = [[10,20], [30, 40], [50, 60]]

i = 0
while i <len(a) : #리스트의 원소 수보다 같거나 커지기 전까지 반복.
    x, y = a[i] #언패킹. 인덱스로 a 리스트의 원소인 리스트를 불러내고 원소 수만큼 변수를 적용.
    print(x, y) #x, y를 출력.
    i += 1 #반복할 때 마다 카운팅.

#23.2.5. while반복문을 두번 사용하기
a = [[10,20], [30, 40], [50, 60]]
i = 0
while i < len(a) : #i가 a 리스트 원소 수보다 같거나 커지기 전까지 반복.
    j = 0
    while j < len(a[i]) : #j가 a리스트 원소(리스트)의 원소 수보다 같거나 커지기 전까지 반복.
        print(a[i][j],end=" ") #인덱스로 a리스트의 원소인 리스트를 불러내고 원소 수만큼 변수를 적용.
        j += 1 #j는 1씩 증가(횟수 카운팅)
    print() #한줄 끝나면 줄바꿈.
    i += 1 #i는 1씩 증가(바깥쪽 for문 같은..)

#23.3. 반복문으로 리스트 만들기
#23.3.1 for반복문으로 1차원 리스트 만들기
a = []
for i in range(10) :
    a.append(0)
print(a)
#-> 0이 10개 들어있는 리스트 완성.

#23.3.2 for 반복문으로 2차원 리스트 만들기
a = []
for i in range(3) : #리스트 안의 원소는 3개.
    line = []
    for j in range(2) : # 리스트 안 원소(리스트)의 원소는 2개.
        line.append(0) #리스트 안 원소(리스트)에 0을 추가 * 2
    a.append(line) #a리스트에 line리스트를 원소로 추가.
print(a)

#23.3.3 리스트 표현식(list comprehension)으로 2차원 리스트 만들기
a = [[0 for j in range(2)] for i in range(3)]
# 먼저 [0 for j in range(2)]을 수행하여 [0, 0] 리스트를 생성.
# for i in range(3)을 수행하여 [0, 0]이 세 개 들어 있는 [[0,0],[0,0],[0,0]] 2차원 리스트를 생성.

a = [[0]*2 for i in range(3)]
# [0]*2를 하면 0이 2개 들어 있는 리스트 [0,0]이 생성된다.
# for i in range(3)을 수행하여 [0, 0]이 세 개 들어 있는 [[0,0],[0,0],[0,0]] 2차원 리스트를 생성.

#23.3.4 톱니형 리스트 만들기
a = [3, 1, 3, 2, 5] #가로 크기를 저장한 리스트
b = [] #빈리스트를 생성한다.
for i in a : #a의 원소를 i로 꺼낸다.
    line = [] #안쪽 리스트로 사용할 빈 리스트 생성.
    for j in range(i) : #i(정수)의 크기 만큼 j를 반복.
        line.append(0) # [0,0,0], [0], [0,0,0] ..
    b.append(line) #line 리스트를 b리스트에 추가
print(b)

#sorted로 2차원 리스트 정렬하기
#2차원 리스트를 정렬할 때는 sorted 함수를 사용합니다.
# sorted(반복가능한 객체, key = 정렬함수, reverse=True, 또는 False)
students = [
    ['john', 'C', 19],
    ['maria', 'A', 25],
    ['andrew', 'B', 7]
]

print(sorted(students, key=lambda student:student[1])) #안쪽 리스트의 인덱스 1을 기준으로 정렬. (lambda 아직 이해 못했음.)

#23.4. 2차원 리스트의 할당과 복사 알아보기
a = [[10,20], [30, 40]]
b = a #b는 a와 같은 주소를 공유.
b[0][0] = 500 #b리스트값을 변경하면 a리스트 값도 변경.
print(a)

a = [[10,20], [30, 40]]
b = a.copy()
b[0][0] = 500
print(a)
print(b)
#※ 리스트 안에 있는 리스트는 복사본의 리스트도 같은 주소를 공유하기 때문에 함께 변경된다.
import copy #2차원 이상의 리스트를 복사하려면 copy 모듈의 deepcopy 함수를 사용해야 함.
a = [[10,20], [30, 40]]
b = copy.deepcopy(a)
b[0][0] = 500 #b리스트만 변경.
print(f'a={a}, b={b}')

#23.6 연습문제 : 3차원 리스트 만들기
# 높이 2, 세로 크기 4, 가로 크기 3인 3차원 리스트(단, 리스트 표현식 사용)
# 1차원 리스트에 원소가 2개, 2차원 리스트에 원소가 4개, 3차원 리스트에 원소가 3개 있다?
#-> 3씩 들어있는 리스트(1)가 4개 있고, 그 리스트(리스트2)를 원소로 하는 리스트(3)이 2개 있다.
a = [[[0 for x in range(3)] for y in range(4)] for z in range(2)]
print(a)

#23.7 심사문제 : 지뢰찾기 --> 아직 잘 모르겠음.
# matrix = []
# for i in range(row) :
#     matrix.append(list(input("입력 : ")))